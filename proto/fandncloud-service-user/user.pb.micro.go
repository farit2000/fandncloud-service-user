// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/fandncloud-service-user/user.proto

package user

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for UserService service

func NewUserServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for UserService service

type UserService interface {
	CreateUser(ctx context.Context, in *User, opts ...client.CallOption) (*UserResponse, error)
	DeleteUser(ctx context.Context, in *User, opts ...client.CallOption) (*UserResponse, error)
	UpdateUser(ctx context.Context, in *User, opts ...client.CallOption) (*UserResponse, error)
	GetUserById(ctx context.Context, in *User, opts ...client.CallOption) (*UserResponse, error)
	CreateRole(ctx context.Context, in *Role, opts ...client.CallOption) (*RoleResponse, error)
	DeleteRole(ctx context.Context, in *Role, opts ...client.CallOption) (*RoleResponse, error)
	UpdateRole(ctx context.Context, in *Role, opts ...client.CallOption) (*RoleResponse, error)
	GetRoleById(ctx context.Context, in *Role, opts ...client.CallOption) (*RoleResponse, error)
	GetUserRoles(ctx context.Context, in *User, opts ...client.CallOption) (*RoleResponse, error)
	CreatePermission(ctx context.Context, in *Role, opts ...client.CallOption) (*RoleResponse, error)
	DeletePermission(ctx context.Context, in *Role, opts ...client.CallOption) (*RoleResponse, error)
	UpdatePermission(ctx context.Context, in *Role, opts ...client.CallOption) (*RoleResponse, error)
	GetPermissionById(ctx context.Context, in *Role, opts ...client.CallOption) (*RoleResponse, error)
	GetUserPermissions(ctx context.Context, in *User, opts ...client.CallOption) (*RoleResponse, error)
	Auth(ctx context.Context, in *User, opts ...client.CallOption) (*TokenResponse, error)
	Validate(ctx context.Context, in *AccessToken, opts ...client.CallOption) (*TokenResponse, error)
	Refresh(ctx context.Context, in *RefreshToken, opts ...client.CallOption) (*TokenResponse, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) CreateUser(ctx context.Context, in *User, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.CreateUser", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) DeleteUser(ctx context.Context, in *User, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.DeleteUser", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UpdateUser(ctx context.Context, in *User, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.UpdateUser", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetUserById(ctx context.Context, in *User, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.GetUserById", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) CreateRole(ctx context.Context, in *Role, opts ...client.CallOption) (*RoleResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.CreateRole", in)
	out := new(RoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) DeleteRole(ctx context.Context, in *Role, opts ...client.CallOption) (*RoleResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.DeleteRole", in)
	out := new(RoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UpdateRole(ctx context.Context, in *Role, opts ...client.CallOption) (*RoleResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.UpdateRole", in)
	out := new(RoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetRoleById(ctx context.Context, in *Role, opts ...client.CallOption) (*RoleResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.GetRoleById", in)
	out := new(RoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetUserRoles(ctx context.Context, in *User, opts ...client.CallOption) (*RoleResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.GetUserRoles", in)
	out := new(RoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) CreatePermission(ctx context.Context, in *Role, opts ...client.CallOption) (*RoleResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.CreatePermission", in)
	out := new(RoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) DeletePermission(ctx context.Context, in *Role, opts ...client.CallOption) (*RoleResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.DeletePermission", in)
	out := new(RoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UpdatePermission(ctx context.Context, in *Role, opts ...client.CallOption) (*RoleResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.UpdatePermission", in)
	out := new(RoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetPermissionById(ctx context.Context, in *Role, opts ...client.CallOption) (*RoleResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.GetPermissionById", in)
	out := new(RoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetUserPermissions(ctx context.Context, in *User, opts ...client.CallOption) (*RoleResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.GetUserPermissions", in)
	out := new(RoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) Auth(ctx context.Context, in *User, opts ...client.CallOption) (*TokenResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.Auth", in)
	out := new(TokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) Validate(ctx context.Context, in *AccessToken, opts ...client.CallOption) (*TokenResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.Validate", in)
	out := new(TokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) Refresh(ctx context.Context, in *RefreshToken, opts ...client.CallOption) (*TokenResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.Refresh", in)
	out := new(TokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceHandler interface {
	CreateUser(context.Context, *User, *UserResponse) error
	DeleteUser(context.Context, *User, *UserResponse) error
	UpdateUser(context.Context, *User, *UserResponse) error
	GetUserById(context.Context, *User, *UserResponse) error
	CreateRole(context.Context, *Role, *RoleResponse) error
	DeleteRole(context.Context, *Role, *RoleResponse) error
	UpdateRole(context.Context, *Role, *RoleResponse) error
	GetRoleById(context.Context, *Role, *RoleResponse) error
	GetUserRoles(context.Context, *User, *RoleResponse) error
	CreatePermission(context.Context, *Role, *RoleResponse) error
	DeletePermission(context.Context, *Role, *RoleResponse) error
	UpdatePermission(context.Context, *Role, *RoleResponse) error
	GetPermissionById(context.Context, *Role, *RoleResponse) error
	GetUserPermissions(context.Context, *User, *RoleResponse) error
	Auth(context.Context, *User, *TokenResponse) error
	Validate(context.Context, *AccessToken, *TokenResponse) error
	Refresh(context.Context, *RefreshToken, *TokenResponse) error
}

func RegisterUserServiceHandler(s server.Server, hdlr UserServiceHandler, opts ...server.HandlerOption) error {
	type userService interface {
		CreateUser(ctx context.Context, in *User, out *UserResponse) error
		DeleteUser(ctx context.Context, in *User, out *UserResponse) error
		UpdateUser(ctx context.Context, in *User, out *UserResponse) error
		GetUserById(ctx context.Context, in *User, out *UserResponse) error
		CreateRole(ctx context.Context, in *Role, out *RoleResponse) error
		DeleteRole(ctx context.Context, in *Role, out *RoleResponse) error
		UpdateRole(ctx context.Context, in *Role, out *RoleResponse) error
		GetRoleById(ctx context.Context, in *Role, out *RoleResponse) error
		GetUserRoles(ctx context.Context, in *User, out *RoleResponse) error
		CreatePermission(ctx context.Context, in *Role, out *RoleResponse) error
		DeletePermission(ctx context.Context, in *Role, out *RoleResponse) error
		UpdatePermission(ctx context.Context, in *Role, out *RoleResponse) error
		GetPermissionById(ctx context.Context, in *Role, out *RoleResponse) error
		GetUserPermissions(ctx context.Context, in *User, out *RoleResponse) error
		Auth(ctx context.Context, in *User, out *TokenResponse) error
		Validate(ctx context.Context, in *AccessToken, out *TokenResponse) error
		Refresh(ctx context.Context, in *RefreshToken, out *TokenResponse) error
	}
	type UserService struct {
		userService
	}
	h := &userServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&UserService{h}, opts...))
}

type userServiceHandler struct {
	UserServiceHandler
}

func (h *userServiceHandler) CreateUser(ctx context.Context, in *User, out *UserResponse) error {
	return h.UserServiceHandler.CreateUser(ctx, in, out)
}

func (h *userServiceHandler) DeleteUser(ctx context.Context, in *User, out *UserResponse) error {
	return h.UserServiceHandler.DeleteUser(ctx, in, out)
}

func (h *userServiceHandler) UpdateUser(ctx context.Context, in *User, out *UserResponse) error {
	return h.UserServiceHandler.UpdateUser(ctx, in, out)
}

func (h *userServiceHandler) GetUserById(ctx context.Context, in *User, out *UserResponse) error {
	return h.UserServiceHandler.GetUserById(ctx, in, out)
}

func (h *userServiceHandler) CreateRole(ctx context.Context, in *Role, out *RoleResponse) error {
	return h.UserServiceHandler.CreateRole(ctx, in, out)
}

func (h *userServiceHandler) DeleteRole(ctx context.Context, in *Role, out *RoleResponse) error {
	return h.UserServiceHandler.DeleteRole(ctx, in, out)
}

func (h *userServiceHandler) UpdateRole(ctx context.Context, in *Role, out *RoleResponse) error {
	return h.UserServiceHandler.UpdateRole(ctx, in, out)
}

func (h *userServiceHandler) GetRoleById(ctx context.Context, in *Role, out *RoleResponse) error {
	return h.UserServiceHandler.GetRoleById(ctx, in, out)
}

func (h *userServiceHandler) GetUserRoles(ctx context.Context, in *User, out *RoleResponse) error {
	return h.UserServiceHandler.GetUserRoles(ctx, in, out)
}

func (h *userServiceHandler) CreatePermission(ctx context.Context, in *Role, out *RoleResponse) error {
	return h.UserServiceHandler.CreatePermission(ctx, in, out)
}

func (h *userServiceHandler) DeletePermission(ctx context.Context, in *Role, out *RoleResponse) error {
	return h.UserServiceHandler.DeletePermission(ctx, in, out)
}

func (h *userServiceHandler) UpdatePermission(ctx context.Context, in *Role, out *RoleResponse) error {
	return h.UserServiceHandler.UpdatePermission(ctx, in, out)
}

func (h *userServiceHandler) GetPermissionById(ctx context.Context, in *Role, out *RoleResponse) error {
	return h.UserServiceHandler.GetPermissionById(ctx, in, out)
}

func (h *userServiceHandler) GetUserPermissions(ctx context.Context, in *User, out *RoleResponse) error {
	return h.UserServiceHandler.GetUserPermissions(ctx, in, out)
}

func (h *userServiceHandler) Auth(ctx context.Context, in *User, out *TokenResponse) error {
	return h.UserServiceHandler.Auth(ctx, in, out)
}

func (h *userServiceHandler) Validate(ctx context.Context, in *AccessToken, out *TokenResponse) error {
	return h.UserServiceHandler.Validate(ctx, in, out)
}

func (h *userServiceHandler) Refresh(ctx context.Context, in *RefreshToken, out *TokenResponse) error {
	return h.UserServiceHandler.Refresh(ctx, in, out)
}
